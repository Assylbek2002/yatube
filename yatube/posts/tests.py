from django.test import TestCase, Client
from .models import User, Post
from django.urls import reverse


class TestUser(TestCase):
    def setUp(self):
        self.test_user = User.objects.create(first_name='TestUser4', last_name='TestUser4', username='testuser4')
        self.test_user.set_password('testtest14')
        self.test_user.save()
        self.c = Client()
        self.c.login(username='testuser4', password='testtest14')
        with open("media/posts/CYIY7OgglyQ.jpg", 'rb') as img:
            self.c.post("/new/", data={
                "text": "–ë–∞—Ä—Å–µ–ª–æ–Ω–∞ –ø–æ–ø—Ä–æ–±—É–µ—Ç –æ—Å–ø–æ—Ä–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –ñ–æ—Ä–¥–∏ –ê–ª—å–±—ã –≤ –º–∞—Ç—á–µ —Å ¬´–≠—Å–ø–∞–Ω—å–æ–ª–æ–º¬ª, —á—Ç–æ–±—ã —Ç–æ—Ç —Å—ã–≥—Ä–∞–ª —Å ¬´–ê—Ç–ª–µ—Ç–∏–∫–æ¬ª.",
                "image": img})

    """–ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ–∑–¥–∞–µ—Ç—Å—è –µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (profile)"""
    def test_profile(self):
        c = Client()
        c.login(username='testuser4', password='testtest14')
        response = c.get(f"/{self.test_user.username}/")
        self.assertEqual(response.status_code, 200)

    """–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç (new)"""
    def test_add_post(self):
        post = Post.objects.filter(text__contains="–ñ–æ—Ä–¥–∏")
        self.assertTrue(post.exists())

    def test_pages(self):
        post = Post.objects.filter(text__contains="–ñ–æ—Ä–¥–∏")

        # –ü–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å –ø–æ—è–≤–ª—è–µ—Ç—Å—è –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å–∞–π—Ç–∞ (index)
        response_main_page = self.c.get("")
        self.assertContains(response_main_page, "–ñ–æ—Ä–¥–∏")

        # –ü–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å –ø–æ—è–≤–ª—è–µ—Ç—Å—è –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (profile)
        response_profile_page = self.c.get(f"/{self.test_user.username}/")
        self.assertContains(response_profile_page, "–æ—Å–ø–æ—Ä–∏—Ç—å")

        # –ü–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å –ø–æ—è–≤–ª—è–µ—Ç—Å—è –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø–æ—Å—Ç–∞ (post)
        response_post_page = self.c.get(f"/{self.test_user.username}/{post[0].id}/")
        self.assertContains(response_post_page, "–æ—Å–ø–æ—Ä–∏—Ç—å")

        # –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç (–µ–≥–æ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞)
        unauthorized_user = Client()
        response_unauthorized = unauthorized_user.get("/new/")
        self.assertEqual(response_unauthorized.status_code, 302)
        self.assertRedirects(response_unauthorized, "/auth/login/?next=/new/")

    def test_post_page_has_image(self):
        post = Post.objects.filter(text__contains="–ñ–æ—Ä–¥–∏")
        response = self.c.get(f"/{self.test_user.username}/{post[0].id}/")
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '<img')

    def test_main_page_has_image(self):
        response = self.c.get("")
        self.assertContains(response, '<img')

    def test_edit_post(self):
        post = Post.objects.filter(text__contains="–ñ–æ—Ä–¥–∏")
        response = self.c.get(f"/{self.test_user.username}/{post[0].id}/edit/")
        form = response.context["form"] # get label
        data = form.initial # get dictionary
        data["text"] = "–û–§–ò–¶–ò–ê–õ–¨–ù–û: –õ—É–∏—Å –°—É–∞—Ä–µ—Å ‚Äî –∏–≥—Ä–æ–∫ –±—Ä–∞–∑–∏–ª—å—Å–∫–æ–≥–æ ¬´–ì—Ä–µ–º–∏–æ¬ª."
        data["group"] = ""
        data["image"] = ""
        response = self.c.post(f"/{self.test_user.username}/{post[0].id}/edit/", data=data, follow=True)
        self.assertContains(response, "–õ—É–∏—Å")

    def test_upload_correct_data(self):
        with open("media/posts/gradus.txt", 'rb') as file:
            data = {"text": "–≠—Ç–æ—Ç –≥–æ–¥ –º—ã –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –∑–∞–±—É–¥–µ–º ü§çüèÜ", "image": file}
            response = self.c.post("/new/", data=data)
        self.assertContains(response, "Upload a valid image. The file you uploaded was either not an image or a corrupted image.")

    def test_cache(self):
        response = self.c.get(reverse('index'))
        self.c.post("/new/", data={
            "text": "üì∞ Standard Sport: ¬´–ë–∞—Ä—Å–µ–ª–æ–Ω–∞¬ª –∏–º–µ–µ—Ç –≤—Å–µ —à–∞–Ω—Å—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å –ù'–ì–æ–ª–æ –ö–∞–Ω—Ç–µ, –µ—Å–ª–∏ —Ç–æ—Ç –Ω–µ –ø—Ä–æ–¥–ª–∏—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç —Å ¬´–ß–µ–ª—Å–∏¬ª."})
        self.assertNotContains(response, "–ö–∞–Ω—Ç–µ")

    def tearDown(self):
        self.test_user.delete()



